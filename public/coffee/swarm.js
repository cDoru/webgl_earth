// Generated by CoffeeScript 1.7.1
(function() {
  this.swarm_controller = function($scope) {
    $scope.oil_radius = 75;
    $scope.oil_volume = 840;
    $scope.remove_time = 10;
    $scope.skimmers_count = 14;
    $scope.spots_count = 5;
    $scope.count_agents = function() {
      return console.log('change');
    };
    $scope.start_animation = function($event) {
      var angle, canvas, center_of_movenment, change, circle_path, createBlob, createPaths, create_path, decrease, hitOptions, horizon_line, outer_circle_path, size, tool, values, vertical_line, vertical_line_1, vertical_line_2, vertical_line_3, vertical_line_4;
      $('.step_1').hide();
      $('.step_2').show();
      $event.preventDefault();
      paper.install(window);
      canvas = document.getElementById("paperCanvas");
      paper.setup(canvas);
      size = new Size(800, 800);
      view.viewSize = size;
      tool = new Tool();
      paper.Item.inject({
        myRotate: function(angle) {
          this.my_rotation += angle;
          return this.rotate(angle);
        },
        my_rotation: 0
      });
      values = {
        paths: $scope.spots_count,
        minPoints: 5,
        maxPoints: 15,
        minRadius: 130,
        maxRadius: 400
      };
      hitOptions = {
        segments: true,
        stroke: true,
        fill: true,
        tolerance: 5
      };
      createPaths = function() {
        var hue, i, lightness, path, points, pointsDelta, radius, radiusDelta, _i, _ref, _results;
        radiusDelta = values.maxRadius - values.minRadius;
        pointsDelta = values.maxPoints - values.minPoints;
        _results = [];
        for (i = _i = 0, _ref = values.paths - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          radius = values.minRadius + Math.random() * radiusDelta;
          if (i === 0) {
            radius = values.maxRadius - 50;
          }
          points = values.minPoints + Math.floor(Math.random() * pointsDelta);
          path = createBlob(view.size.multiply(Point.random()), radius, points);
          lightness = (Math.random() - 0.5) * 0.4 + 0.4;
          hue = Math.random() * 360;
          path.position = paper.view.center;
          path.fillColor = "#000";
          path.strokeColor = "black";
          _results.push(path.opacity = 0.4);
        }
        return _results;
      };
      createBlob = function(center, maxRadius, points) {
        var delta, i, path, _i, _ref;
        path = new Path();
        path.closed = true;
        for (i = _i = 0, _ref = points - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          delta = new Point({
            length: (maxRadius * 0.5) + (Math.random() * maxRadius * 0.5),
            angle: (360 / points) * i
          });
          path.add(center.add(delta));
        }
        path.smooth();
        return path;
      };
      window.oilLayer = new Layer();
      createPaths();
      window.skimmersDrawLayer = new Layer();
      window.skimmersLayer = new Layer();
      window.sectorsLayer = new Layer();
      circle_path = new Path.Circle({
        center: view.center,
        radius: 120,
        strokeColor: 'red'
      });
      circle_path.strokeWidth = 5;
      outer_circle_path = new Path.Circle({
        center: view.center,
        radius: 385,
        strokeColor: 'red'
      });
      outer_circle_path.strokeWidth = 5;
      horizon_line = new Path({
        segments: [[15, view.size._height / 2], [view.size._width - 15, view.size._height / 2]],
        strokeColor: "red",
        strokeWidth: 2
      });
      vertical_line = new Path({
        segments: [[view.size._width / 2, 15], [view.size._width / 2, view.size._height - 15]],
        strokeColor: "red",
        strokeWidth: 2
      });
      vertical_line_1 = new Path({
        segments: [[486, 318], [667, 125]],
        strokeColor: "red",
        strokeWidth: 2
      });
      vertical_line_2 = new Path({
        segments: [[486, 484], [667, 681]],
        strokeColor: "red",
        strokeWidth: 2
      });
      vertical_line_3 = new Path({
        segments: [[313, 484], [138, 681]],
        strokeColor: "red",
        strokeWidth: 2
      });
      vertical_line_4 = new Path({
        segments: [[313, 318], [136, 122]],
        strokeColor: "red",
        strokeWidth: 2
      });
      skimmersLayer.activate();
      window.skimmer = new Path.Rectangle({
        point: {
          y: 300,
          x: 500
        },
        size: [15, 15],
        strokeColor: 'green',
        fillColor: 'green'
      });
      skimmersDrawLayer.activate();
      center_of_movenment = {
        radius: 100,
        center: new Point(400, 400)
      };
      change = 100;
      decrease = false;
      create_path = true;
      angle = 0;
      view.onFrame = function(event) {
        var x, y, y_change;
        if (decrease === true) {
          change -= 1;
        } else {
          change += 1;
        }
        if (change >= center_of_movenment.radius) {
          decrease = true;
          create_path = true;
        }
        if (change <= -center_of_movenment.radius) {
          decrease = false;
          create_path = true;
        }
        x = center_of_movenment.center.x + change;
        y_change = (change * change) / 100;
        y = center_of_movenment.center.y - y_change;
        skimmer.position = new Point({
          y: y,
          x: x
        });
        if (create_path === true) {
          if (window.skimmer_path) {
            window.skimmer_path.simplify(10);
            window.skimmer_path.smooth;
          }
          window.skimmer_path = new Path({
            segments: [
              {
                y: y,
                x: x
              }
            ],
            strokeColor: "white",
            strokeWidth: 15,
            opacity: 0.6
          });
          return create_path = false;
        } else {
          return window.skimmer_path.add(skimmer.position);
        }
      };
      tool.onMouseMove = function(event) {
        var layer, _i, _len, _ref;
        project.activeLayer.selected = false;
        _ref = project.layers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          layer = _ref[_i];
          layer.selected = false;
        }
        if (event.item) {
          return event.item.selected = true;
        }
      };
      view.draw();
      return true;
    };
    return $scope.show_parameters = function($event) {
      $('.step_2').hide();
      $('.step_1').show();
      return $event.preventDefault();
    };
  };

}).call(this);
