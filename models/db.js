// Generated by CoffeeScript 1.7.1
(function() {
  var City, Country, User, certain_country, citySchema, countrySchema, country_by_region, country_by_sub_region, country_list, mongoose, random_country, userSchema;

  mongoose = require('mongoose');

  citySchema = new mongoose.Schema({
    code: String,
    country_code: String,
    city_name: {
      en: String,
      ru: String
    },
    coordinates: [Number],
    place_id: String,
    places: mongoose.Schema.Types.Mixed,
    flickr: mongoose.Schema.Types.Mixed,
    wikipedia_array: mongoose.Schema.Types.Mixed
  });

  countrySchema = new mongoose.Schema({
    area: Number,
    code: String,
    name: mongoose.Schema.Types.Mixed,
    subarea: Number
  });

  userSchema = new mongoose.Schema({
    password: String,
    username: String
  });

  User = mongoose.model('User', userSchema);

  City = mongoose.model('City', citySchema);

  Country = mongoose.model('Country', countrySchema);

  mongoose.connect('mongodb://pomahtuk:ipauk17y@ds053479.mongolab.com:53479/heroku_app27148845');

  exports.User = User;

  exports.City = City;

  exports.Country = Country;

  exports.random_city = function(callback) {
    return City.count({}, function(err, count) {
      var rand;
      if (err) {
        return callback(err);
      }
      rand = Math.floor(Math.random() * count);
      return City.findOne({}).skip(rand).exec(function(err, random) {
        return callback("", random);
      });
    });
  };

  exports.citylist = function(callback) {
    return City.find(function(err, cities) {
      if (err) {
        return console.log(err);
      } else {
        return callback("", cities);
      }
    });
  };

  exports.citylist_manager = function(callback) {
    return City.find({}, 'code country_code city_name wikipedia_array.id coordinates flickr.place_id', function(err, cities) {
      if (err) {
        return console.log(err);
      } else {
        return callback("", cities);
      }
    });
  };

  exports.certain_city = function(code, callback) {
    if (code != null) {
      return City.find({
        $or: [
          {
            'code': new RegExp(code)
          }, {
            'city_name.en': new RegExp(code)
          }, {
            'city_name.ru': new RegExp(code)
          }
        ]
      }, function(err, city) {
        if (err) {
          return console.log(err);
        } else {
          return callback("", city);
        }
      });
    } else {
      return callback("", 'no querry found');
    }
  };

  exports.random_country = random_country = function(callback) {
    return Country.count({}, function(err, count) {
      var rand;
      if (err) {
        return callback(err);
      }
      rand = Math.floor(Math.random() * count);
      return Country.findOne({}).skip(rand).exec(function(err, random) {
        return callback("", random);
      });
    });
  };

  exports.countrylist = country_list = function(code, callback) {
    return Country.find(function(err, countries) {
      if (err) {
        return console.log(err);
      } else {
        return callback("", countries);
      }
    });
  };

  exports.certain_country = certain_country = function(code, callback) {
    if (code != null) {
      return Country.find({
        'code': new RegExp(code)
      }, function(err, country) {
        if (err) {
          return console.log(err);
        } else {
          return callback("", country);
        }
      });
    } else {
      return callback("", 'no querry found');
    }
  };

  exports.country_by_region = country_by_region = function(region, callback) {
    if (region != null) {
      return Country.find({
        'region': region
      }, function(err, countries) {
        if (err) {
          return console.log(err);
        } else {
          return callback("", countries);
        }
      });
    } else {
      return callback("", 'no querry found');
    }
  };

  exports.country_by_sub_region = country_by_sub_region = function(sub_region, callback) {
    if (typeof region !== "undefined" && region !== null) {
      return Country.find({
        'sub_region': sub_region
      }, function(err, countries) {
        if (err) {
          return console.log(err);
        } else {
          return callback("", countries);
        }
      });
    } else {
      return callback("", 'no querry found');
    }
  };

  exports.country_by_region_and_sub_region = country_by_sub_region = function(region, sub_region, callback) {
    if (region != null) {
      return Country.find({
        'sub_region': sub_region,
        'region': region
      }, function(err, countries) {
        if (err) {
          return console.log(err);
        } else {
          return callback("", countries);
        }
      });
    } else {
      return callback("", 'no querry found');
    }
  };

}).call(this);
